package iotclient;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import static java.lang.System.exit;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class Gui extends javax.swing.JFrame implements Runnable {

    DataInputStream dis;
    DataOutputStream dos;
    Socket s;
    boolean userAuthed = false;

    public HashMap< String, HashMap< String, Vector>> fields = new HashMap< String, HashMap< String, Vector>>();

    public void addField(String fieldName) {
        if (fields.containsKey(fieldName) == false) {
            fields.put(fieldName, new HashMap< String, Vector>());
            populateFieldList();
        }
    }

    public void addSensorToField(String fieldName, String sensorName) {
        if (fields.containsKey(fieldName) == false) {
            addField(fieldName);
        }
        fields.get(fieldName).put(sensorName, new Vector());
        String selectedField = String.valueOf(fieldSelectBox.getModel().getElementAt(fieldSelectBox.getSelectedIndex()));
        if (selectedField.equals(fieldName)) {
            showWeatherStationsInField(fieldName);
        }
    }

    public void addSensorDataToField(String fieldName, String sensorName, double latitude, double longitude, double temperature, double barometricPressure, double windSpeed, double relativeHumidity, double airQualityIndex) {
        if (fields.containsKey(fieldName) == false) {
            addField(fieldName);
        }
        if (fields.get(fieldName).containsKey(sensorName) == false) {
            addSensorToField(fieldName, sensorName);
        }

        String data = "";
        data += "Temperature: " + String.format("%.2f", temperature) + "°C \n";
        data += "Barometric pressure: " + String.format("%.2f", barometricPressure) + " mBar \n";
        data += "Wind Speed: " + String.format("%.2f", windSpeed) + " km/h \n";
        data += "Relative humidity: " + String.format("%.2f", relativeHumidity) + "% \n";
        data += "Air quality index: " + String.format("%.2f", airQualityIndex) + "\n";
        data += "Latitude: " + String.format("%.4f", latitude) + "° \n";
        data += "Longitude: " + String.format("%.4f", longitude) + "° \n";

        data += "\n";
        fields.get(fieldName).get(sensorName).add(data);
        try {
            String selectedField = String.valueOf(fieldSelectBox.getModel().getElementAt(fieldSelectBox.getSelectedIndex()));
            String selectedSensor = String.valueOf(sensorList.getModel().getElementAt(sensorList.getSelectedIndex()));
            if (selectedField.equals(fieldName) && sensorName.equals(selectedSensor)) {
                showWeatherStationData(fieldName, sensorName);
            }
        } catch (Exception e) {
        }

    }

    private void enableElements() {
        fieldSelectBox.setEnabled(true);
        sensorDataField.setEnabled(true);
        sensorList.setEnabled(true);
        loginButton.setEnabled(false);
        usernameBox.setEnabled(false);
        passwordBox.setEnabled(false);
    }

    private void disableElements() {
        fieldSelectBox.setEnabled(false);
        sensorDataField.setEnabled(false);
        sensorList.setEnabled(false);
    }

    public Gui() {
        initComponents();
        disableElements();
        DefaultCaret caret = (DefaultCaret)sensorDataField.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fieldSelectBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        sensorList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sensorDataField = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        usernameBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        passwordBox = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fieldSelectBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fieldSelectBoxItemStateChanged(evt);
            }
        });

        sensorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sensorListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sensorList);

        jLabel2.setText("WeatherStations ");

        sensorDataField.setEditable(false);
        sensorDataField.setColumns(20);
        sensorDataField.setRows(5);
        jScrollPane2.setViewportView(sensorDataField);

        jLabel3.setText("Data from selected WeatherStation:");

        jButton2.setText("EXIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.setName("LoginButton"); // NOI18N
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginButtonMouseClicked(evt);
            }
        });
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Fields:");

        usernameBox.setName("UsernameBox"); // NOI18N
        usernameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Password:");

        jLabel5.setText("Username:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fieldSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(usernameBox, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(passwordBox))
                                .addGap(18, 18, 18)
                                .addComponent(loginButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(772, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fieldSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loginButton)
                            .addComponent(usernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(507, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //exit button, exits the Gui
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void fieldSelectBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fieldSelectBoxItemStateChanged
        //whenever user switches the field, showWeatherStationsInField triggers
        //        String selectedField = fieldSelectBox.getSelectedItem().toString();
        String fieldName = String.valueOf(fieldSelectBox.getModel().getElementAt(fieldSelectBox.getSelectedIndex()));
        showWeatherStationsInField(fieldName);
    }//GEN-LAST:event_fieldSelectBoxItemStateChanged

    private void sensorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sensorListMouseClicked
        //on mouse click index of the clicked item is sent to showWeatherStationData function which displays the local data
        //String indexOfWeatherStation = String.valueOf(sensorList.getModel().getElementAt(sensorList.getSelectedIndex()));
        try {
            String fieldName = String.valueOf(fieldSelectBox.getModel().getElementAt(fieldSelectBox.getSelectedIndex()));
            String sensorName = String.valueOf(sensorList.getModel().getElementAt(sensorList.getSelectedIndex()));
            showWeatherStationData(fieldName, sensorName);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_sensorListMouseClicked

    private void usernameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameBoxActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loginButtonActionPerformed

    private void loginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseClicked
        // TODO add your handling code here:
        this.authUser(usernameBox.getText(), passwordBox.getText());
    }//GEN-LAST:event_loginButtonMouseClicked

    /**
     * appends the combobox with a up to date list of all available fields.
     *
     * The function takes in a string array of all available fields and updates
     * whenever a new field is added.
     *
     * @param Fields string array of fields.
     */
    private void populateFieldList() {
        fieldSelectBox.removeAllItems();
        Set< String> a = fields.keySet();
        for (String x : a) {
            fieldSelectBox.addItem(x);
        }
    }

    /**
     *
     * Displays all Weather Stations located on the field user selects.
     *
     * This method utilizes the jComboBox1ItemStateChanged, so whenever combo
     * box value changes the function displays appropriate weather stations for
     * selected field.
     *
     * Use this function when you need to display all available weather stations
     * for a field.
     *
     * @param selectedField
     */
    public void showWeatherStationsInField(String selectedField) {
        try {
            DefaultListModel dlm = new DefaultListModel();
            HashMap< String, Vector> x = fields.get(selectedField);
            Set< String> a = x.keySet();
            a.forEach((c) -> {
                dlm.addElement(c);
            });
            sensorList.setModel(dlm);
        } catch (Exception e) {
        }

    }

    public void showWeatherStationData(String fieldName, String sensorName) {
        try {
            sensorDataField.setText(null);
            sensorDataField.append(sensorName);
            sensorDataField.append("\n");
            Vector v = fields.get(fieldName).get(sensorName);
            v.forEach((o) -> {
                sensorDataField.append((String) o);
            });

        } catch (Exception e) {

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> fieldSelectBox;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordBox;
    private javax.swing.JTextArea sensorDataField;
    private javax.swing.JList<String> sensorList;
    private javax.swing.JTextField usernameBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        setupConnection();
        this.setVisible(true);

        while (!this.userAuthed) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                exit(0);
            }
        }

        while (true) {
            try {
                String received = dis.readUTF();
                JSONParser jsonParser = new JSONParser();
                Object obj = jsonParser.parse(received);
                JSONObject message = (JSONObject) obj;

                if (message.containsKey("FIELDADD")) {
                    JSONObject o = (JSONObject) message.get("FIELDADD");
                    String fieldName = (String) o.get("fieldName");
                    //double latitude = (double) o.get("latitude");
                    //double longitude = (double) o.get("longitude");
                    this.addField(fieldName);
                } else if (message.containsKey("ADDWEATHERSTATION")) {
                    JSONObject o = (JSONObject) message.get("ADDWEATHERSTATION");
                    String fieldName = (String) o.get("fieldName");
                    String sensorName = (String) o.get("sensorName");
                    this.addSensorToField(fieldName, sensorName);

                } else if (message.containsKey("ADDWEATHERSTATIONDATA")) {
                    JSONObject o = (JSONObject) message.get("ADDWEATHERSTATIONDATA");
                    String fieldName = (String) o.get("fieldName");
                    String sensorName = (String) o.get("sensorName");
                    double latitude = (double) o.get("latitude");
                    double longitude = (double) o.get("longitude");
                    double temperature = (double) o.get("temperature");
                    double barometricPressure = (double) o.get("barometricPressure");
                    double windSpeed = (double) o.get("windSpeed");
                    double relativeHumidity = (double) o.get("relativeHumidity");
                    double airQualityIndex = (double) o.get("airQualityIndex");
                    this.addSensorDataToField(fieldName, sensorName, latitude, longitude, temperature, barometricPressure, windSpeed, relativeHumidity, airQualityIndex);

                } else {
                }

            } catch (IOException | ParseException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                exit(0);
            }
        }
    }

    private void setupConnection() {
        try {
            InetAddress ip = InetAddress.getByName("localhost");
            this.s = new Socket(ip, 5056);
            this.dis = new DataInputStream(s.getInputStream());
            this.dos = new DataOutputStream(s.getOutputStream());
        } catch (UnknownHostException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            exit(0);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            exit(0);
        }
    }

    private void authUser(String username, String password) {
        JSONObject userData = new JSONObject();
        userData.put("username", username);
        userData.put("password", password);
        JSONObject request = new JSONObject();
        request.put("AUTHUSER", userData);
        boolean a = false;
        try {
            try {
                this.dos.writeUTF(request.toString());
            } catch (IOException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            a = this.dis.readBoolean();

        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (a) {
            this.userAuthed = true;
            enableElements();
        } else {
            this.userAuthed = false;
            JOptionPane.showMessageDialog(null, "Invalid password, program will now terminate!", "Invalid password", JOptionPane.INFORMATION_MESSAGE);
            exit(0);
        }
    }

}
